1:6 * 2
c(1, 2, 6, 10)
1:4 + 0:3
c(1, 2, 3, 4) + c(0, 1, 2, 3)
TRUE
c(T, T, F, F)
"hello world"
c("hello", "hi", "bye", "bye-bye")
NULL
factor(c("hello", "hi", "bye", "bye"))
factor(c("hello", "hi",
"bye", "bye"),
levels = c("hi", "hello",
"bye", "bye-bye"))
str(3)
str("hello")
str(1.1)
str(1:8)
str(2L)
str(c(2, 5, 8))
str(c(2L, 5L, 8L))
str(c(1,3))
str(factor(c("hello", "bye")))
str(factor(c("hello", "bye"),
levels = c("hi", "hello",
"bye")))
str(Sys.time())
str(Sys.Date())
data.frame(
subjid  = 1:6,
country = c("INDIA", "JAPAN",
"UK", "FRA",
"US", "CAN"),
nums = c(2.3, 4.1, 3.5,
3.2, 5.6, 8.9))
library(tibble)
tribble(
~"id", ~"greet", ~"nums", # column heads
1,        "hi",       2.3,
2,        "bye",      3.5,
3,        "adios",    4.2
)
# Unnamed arguments are named with their expression:
a <- 1:5
tibble(a, a * 2)
# Scalars (vectors of length one) are recycled:
ab <- tibble(a, b = a * 2, c = 1)
ab
# Columns are available in subsequent expressions:
same <- tibble(x = runif(3), y = x * 2)
same
# tibble() never coerces its inputs
str(tibble(letters))
str(tibble(x = list(diag(1), diag(2))))
# or munges column names (unless requested),
chk_tbl  <- tibble(`a + b` = 1:3)
chk_tbl
# Unnamed arguments are named with their expression:
```
unlink("mini_flip_book_cache", recursive = TRUE)
cars
mean(1:5)
mean(1:100^2)
sd(1:10)
mean(c(1, 4, 6, 7))
mean(c(1, 4, 6, 7, NA))
mean(c(1, 4, 6, 7, NA), na.rm = T)
sd(c(1:10, NA))
sd(c(1:10, NA), na.rm = T)
?mean()
x <- c(0:10, 50)
xm <- mean(x)
c(xm, mean(x, trim = 0.10))
x <- c(1:5 , 10)
x <- c(1:5 , 1)
x <- c(1:5 , 10)
x <- c(1:5 )
mean(x)
mean(x , trim = .10)
mean(x , trim = .5)
x <- c(1:10 )
mean(x)
mean(x , trim = .5)
x <- c(1:5 , 10)
mean(x)
mean(x , trim = .5)
?SD()
?sd()
unlink("mini_flip_book_cache", recursive = TRUE)
?median
x <- 1:4
x
median(x)
x <- 1:5
median(x)
x <- c(1:3 , 100, 1000)
median(x)
?mode
?min()
min(5:1, pi) #-> one number
pmin(5:1, pi) #->  5  numbers
unlink("mini_flip_book_cache", recursive = TRUE)
datasets()
datasets::women
datasets::ChickWeight
select_var <-  dplyr::filter(datasets::ChickWeight , weight > 100 | Diet == 1 )
fil <- select_var <-  dplyr::filter(datasets::ChickWeight , weight > 100 | Diet == 1 )
fil
select_var <-  dplyr::filter(datasets::ChickWeight , weight < 100 | Diet == 2 )
fil <- select_var <-  dplyr::filter(datasets::ChickWeight , weight < 100 | Diet == 2 )
fil
select_var <-  as_tibble(dplyr::filter(datasets::ChickWeight , weight < 100 | Diet == 2 ))
select_var
#Filter
filter_var <-  as_tibble(dplyr::filter(datasets::ChickWeight , weight < 100 | Diet == 2 ))
# arrange
filter_var <-  arrage (filter_var , weight )
filter_var
View(filter_var)
filter_var <-  as_tibble(dplyr::filter(datasets::ChickWeight , weight < 100 | Diet == "2" ))
filter_var
filter_var <-  as_tibble(dplyr::filter(datasets::ChickWeight , weight < 100 & Diet == "2" ))
filter_var
filter_var <-  arrange(filter_var , weight )
filter_var
View(filter_var)
filter_var <-  arrange(filter_var , weight , Time  )
View(filter_var)
arrange_var <-  arrange(filter_var , weight , desc(Time)  )
arrange_var
View(arrange_var)
View(chk_tbl)
View(arrange_var)
arrange_var <-  arrange(filter_var , weight , desc(Time)  )
View(arrange_var)
View(chk_tbl)
View(arrange_var)
arrange_chk <-  as_tibble(dplyr::filter(arrange_var , weight == 72 | weight ==  73 || weight == 74 ))
arrange_chk
arrange_chk <-  as_tibble(dplyr::filter(arrange_var , weight == '72' | weight ==  '73' | weight == "74" ))
arrange_chk
uni <- distinct(arrange_var , weight )
uni
library(dplyr)
names(datasets::ChickWeight)
# Filtering for purpose of Presentation
CWeight <- filter(datasets::ChickWeight  , weight == '72' | weight ==  '73' | weight == "74"  )
#Select
select_var <- head(dplyr::select( CWeight , weight , Diet  ))
#Filter
filter_var <-  as_tibble(dplyr::filter(CWeight , weight < 100 & Diet == "2" ))
# arrange
arrange_var <-  arrange(filter_var , weight , desc(Time)  )
#Filter
arrange_chk <-  as_tibble(filter(arrange_var , weight == '72' | weight ==  '73' | weight == "74" ))
#distinct
uni <- as_tibble(distinct(CWeight , weight ))
View(uni)
View(arrange_var)
unlink("mini_flip_book_cache", recursive = TRUE)
a <- 1:5
tribble(a, a * 2)
tibble(
~"id", ~"greet", ~"nums", # column heads
1,        "hi",       2.3,
2,        "bye",      3.5,
3,        "adios",    4.2
)
library(tibble)
tibble(
~"id", ~"greet", ~"nums", # column heads
1,        "hi",       2.3,
2,        "bye",      3.5,
3,        "adios",    4.2
)
a <- 1:5
tibble(a, a * 2)
unlink("mini_flip_book_cache", recursive = TRUE)
xaringanExtra::use_share_again()
# This is the recommended set up for flipbooks
# you might think about setting cache to TRUE as you gain practice --- building flipbooks from scratch can be time consuming
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.height = 6, out.width = "100%", comment = " ", cache = T , warning = F, message = F)
library(flipbookr)
library(tidyverse)
library(tibble)
?tibble()
unlink("mini_flip_book_cache", recursive = TRUE)
?tribble()
unlink("mini_flip_book_cache", recursive = TRUE)
xaringanExtra::use_share_again()
# This is the recommended set up for flipbooks
# you might think about setting cache to TRUE as you gain practice --- building flipbooks from scratch can be time consuming
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.height = 6, out.width = "100%", comment = " ", cache = T , warning = F, message = F)
library(flipbookr)
library(tidyverse)
library(clinicalfd)
library(xaringanExtra)
library(here)
#library(tibble) # part of tidyverse
x <- c(1,2,3,4,5,6) ; class(x)
typeof(x) ;
a1 = 10             ; class(a1)
b1 <- 11.01            ; class(b1)
typeof(b1) ;
b3 <- 11i            ; class(b3)
typeof(b3) ;
c = a1 + b1         ; class(c)
typeof(c) ;
D = a1 * b1         ; class(D);
typeof(D) ;
E = x - 10         ; class(E);
typeof(E)
print(E)
x <- c("Mon" , "TUE" , "Wed");  class(x)
a1 = "THUR" ;   class(a1)
weekday <- c("Mon" , "TUE" , "Wed" , "Mon" , "Tue" , "Wed"); class(weekday )
# Getting the Count of Week days , See TUE and Tue are counted differently as R #is case sensitive
week_count <- table(weekday)
week_count
# b1 <- FRI  This gives an ERROR
#class(b1)
is.character("hi")
is.numeric(1)
is.integer(2.3)
is.double(4L)
is.integer(4)
is.integer(4L)
is.factor("good")
as.numeric("hi")
as.integer(1)
as.character(2.3)
as.double(4L)
is.integer(4)
is.integer(4L)
as.factor(c("good", "bad"))
#%>% this is a pipe operator
# passes all of what precedes
#to function that follows
matrix(1:4, nrow = 2) %>% as.vector()
c("50", "80") %>%
as.factor() %>%
as.numeric() # maybe surprising
c("50", "80") %>%
as.factor() %>%
as.character() %>%
as.numeric() # less surprising
3:10
1:6 * 2
c(1, 2, 6, 10)
1:4 + 0:3
c(1, 2, 3, 4) + c(0, 1, 2, 3)
TRUE
c(T, T, F, F)
"hello world"
c("hello", "hi", "bye", "bye-bye")
NULL
factor(c("hello", "hi", "bye", "bye"))
factor(c("hello", "hi",
"bye", "bye"),
levels = c("hi", "hello",
"bye", "bye-bye"))
str(3)
str("hello")
str(1.1)
str(1:8)
str(2L)
str(c(2, 5, 8))
str(c(2L, 5L, 8L))
str(c(1,3))
str(factor(c("hello", "bye")))
str(factor(c("hello", "bye"),
levels = c("hi", "hello",
"bye")))
str(Sys.time())
str(Sys.Date())
data.frame(
subjid  = 1:6,
country = c("INDIA", "JAPAN",
"UK", "FRA",
"US", "CAN"),
nums = c(2.3, 4.1, 3.5,
3.2, 5.6, 8.9))
library(tibble)
tribble(
~"id", ~"greet", ~"nums", # column heads
1,        "hi",       2.3,
2,        "bye",      3.5,
3,        "adios",    4.2
)
# Unnamed arguments are named with their expression:
a <- 1:5
tibble(a, a * 2)
# Scalars (vectors of length one) are recycled:
ab <- tibble(a, b = a * 2, c = 1)
ab
# Columns are available in subsequent expressions:
same <- tibble(x = runif(3), y = x * 2)
same
# tibble() never coerces its inputs
str(tibble(letters))
str(tibble(x = list(diag(1), diag(2))))
# or munges column names (unless requested),
chk_tbl  <- tibble(`a + b` = 1:3)
chk_tbl
# Unnamed arguments are named with their expression:
mean(1:5)
mean(1:100^2)
sd(1:10)
mean(c(1, 4, 6, 7))
mean(c(1, 4, 6, 7, NA))
mean(c(1, 4, 6, 7, NA), na.rm = T)
sd(c(1:10, NA))
sd(c(1:10, NA), na.rm = T)
x <- 1:4 ; x
median(1:4)
# = 2.5 [even number]
x <- c(1:3 , 100, 1000) ; x
median(c(1:3, 100, 1000))
# = 3 [odd, robust]
min(5:1, pi) #-> one number
pmin(5:1, pi) #->  5  numbers
cars %>%
filter(speed > 4) %>%
ggplot() +
aes(x = speed) + #BREAK
aes(y = dist) + #BREAK
geom_point(
alpha = .8,
color = "blue"
) +
aes(size = speed) #BREAK
cars %>%
sample_frac(size = 1, replace = TRUE) %>%
ggplot() +
aes(x = speed) +
aes(y = dist) +
geom_count(
alpha = .7,
color = "blue",
size = 4
) +
geom_smooth(method = lm, se = FALSE) +
coord_cartesian(xlim = range(cars$speed),
ylim = range(cars$dist)) +
theme(legend.position = c(.9, .2))
# hello
jam <- "hi"
library(dplyr)
names(datasets::ChickWeight)
# Filtering for purpose of Presentation
CWeight <- filter(datasets::ChickWeight  , weight == '72' | weight ==  '73' | weight == "74"  )
#Select
select_var <- head(dplyr::select( CWeight , weight , Diet  ))
#Filter
filter_var <-  as_tibble(dplyr::filter(CWeight , weight < 100 & Diet == "2" ))
unlink("mini_flip_book_cache", recursive = TRUE)
cars
cars <- filter(speed > 4)
speed  <- filter( cars , speed > 4 )
speed
speed  <- filter( cars , speed > 4 & speed < 11)
speed
library(dplyr)
#Select
sel <- select(cars,speed)
#Filter
sp  <- filter( cars,speed > 4 & speed < 11)
cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 20 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist ) %>% #BREAK
distinct(time)
cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 20 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
time <- cars %>%  distinct(time)
cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 20 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
ti <- cars %>% distinct(time)
cars
cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 20 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 20 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
ti <- cars %>% distinct(time)
ti
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 15 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
time <- cars %>%  distinct(time)
View(time)
View(cars)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed < 13 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
time <- cars %>%  distinct(time)
View(cars)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
time <- cars %>%  distinct(time)
View(cars)
View(ti)
View(time)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist ) %>% #BREAK
rename( time = Fast , speed = furious)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars <- cars %>%  rename( time = Fast , speed = furious)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars <- cars %>%  rename(Fast = time , furious =  speed )
time <- cars %>%  distinct(time)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
rename(Fast = time , furious =  speed )
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
cars <- cars %>%  rename(Fast = time , furious =  speed )
unlink("mini_flip_book_cache", recursive = TRUE)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
cars <- cars %>%  rename(Fast = time , furious =  speed )
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
cars <- cars %>%  rename(Fast = time , furious =  speed )
library(dplyr)
cars <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
cars <- cars %>%  rename(Fast = time , furious =  speed )
library(dplyr)
cars2 <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )  %>% #BREAK
cars3 <- cars2 %>%  rename(time = fast , speed = furious )
library(dplyr)
cars2 <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars3 <- cars2 %>%  rename(time = fast , speed = furious )
library(dplyr)
cars2 <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars3 <- cars2 %>%  rename( fast = time  )
time <- cars3 %>%  distinct(Fast)
View(cars3)
library(dplyr)
cars2 <- cars %>%
filter(speed > 4 ) %>% #BREAK
filter(speed <= 10 ) %>% #BREAK
arrange(speed , desc(dist)) %>% #BREAK
mutate(time = speed * dist )
cars3 <- cars2 %>%  rename( fast = time ,  furious = speed )
time <- cars3 %>%  distinct(fast)
unlink("mini_flip_book_cache", recursive = TRUE)
cars %>%  head(distinct(dist))
cars %>% distinct(dist)
cars %>%  distinct(dist) %>% head()
unlink("docs/index_cache", recursive = TRUE)
