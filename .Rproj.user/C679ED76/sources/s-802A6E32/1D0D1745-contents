---
title: "---Learning Data Manuplation----"
subtitle: "With flipbookr and xaringan"
author: "<br><br>Phanikumar S Tata"
date: "`r Sys.Date()`"
output:
  xaringan::moon_reader:
    seal: false
    lib_dir: libs
    css: [default, hygge, ninjutsu]
    nature:
      ratio: 16:9
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
---


```{r xaringanExtra-share-again, echo=FALSE}
xaringanExtra::use_share_again()
```

![](figures/present.jpg)

```{r, eval = F, echo = F}
library(tidyverse)
"https://images.unsplash.com/photo-1584717900604-56cd6daf54f5?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=633&q=80" %>% 
  magick::image_read() %>% 
  magick::image_rotate(90) %>% 
  magick::image_write("broom.jpg")
```

class: left, top, inverse
background-image: url(broom.jpg)
background-size: cover

# .large[Data Cleaning]
### Walk-throughs <br>with {flipbookr}<br>and {xaringan}

<br> 
<br>

#### .right[ Presentation : Phanikumar<br><br>source code: https://github.com/tataphani/oct_n_pres <br><br>Photo Credit: Zoya Loonohod]<br>

```{r , include = F}
# This is the recommended set up for flipbooks
# you might think about setting cache to TRUE as you gain practice --- building flipbooks from scratch can be time consuming

knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(fig.height = 6, out.width = "100%", comment = " ", cache = T , warning = F, message = F)


library(flipbookr)
library(tidyverse)
library(clinicalfd)
library(xaringanExtra)
library(here)
#library(tibble) # part of tidyverse

```

---
class: inverse, middle, center

# Hi!

--

This 'minimal flipbook' template has a couple of classic examples to get you building your first data manipulation flipbooks!

--

flipbooks are code-movies.  The frames of the movies are slides. Here we use the R package {xaringan} to create a remark.js slideshow. 

--

Slide breaks are indicated with `---` (be careful trailing white space is not allowed)

--

flipbookr's `chunk_reveal()` disassembles a single code chunk and creates the "build" of multiple partial-code chunks on different slides (the --- is automatically generated for you too).  

--

We use `chunk_reveal()` it 'inline', not in a code chunk. 

--

Let's start!

---

class: inverse, middle, center

# Introduction


####Data cleaning is the pits.  Or is it?  The cleaning tools of the **tidyverse** and other packages like  **janitor** might help such tasks become less terrible -- and more fun! Let's look at a couple of examples. 

---

# Getting started with R and RStudio

The tools demonstrated in this book are implemented in the statistical software, R which is opensource and freely available.  RStudio, an integrated development environment (IDE), is a nice environment for working in R.  The following links may help you get R and RStudio up and running. 

- [Install Windows](https://www.youtube.com/watch?v=aCRMhAWmtpw)
- [Install Mac](https://www.youtube.com/watch?v=GLLZhc_5enQ)


---

# Acknowledgements

I'm grateful to the tidyverse team for their tireless work on developing and maintaining this wonderful toolkit and to RStudio for supporting the development 

I'm *very* grateful to them for their work on this as well as to Yihui Xie and others for their work on the Xaringan package --- the extraordinary platform for creating the slides. 

Thankful for **R user community meetup** for giving me opportunity to present

---

# Open your project in RStudio

It's helpful to use RStudio projects. The way to create a final_project is to use Menu options in R Studio.  In RStudio, you can navigate to it from the right hand corner icon.  In the example, here, I'm currently in a project called `oct_n_pres` 

Steps to start new project 
1) Up Left side click on File 
![](figures/00_project_setup.png)

2) Click on the Open Project , 

![](figures/navigate_to_project.png)


---

3) Then Click on New Directory


![](figures/01_project_setup.png)
---

 Click on either New Project ( If you do not have a Directory (Windows Folder))

 ![](figures/02_project_setup.png)

---
click on the New Directory `**~**`  represents my documents folder on windows ) 
  
  ![](figures/03_project_setup.png)
---

Or if you have existing folder  then use , here you see 

1.  **~** --> My Documents folder
2.  Create Project --  creates new directory (windows folder  )
3.  Open in new session --> Opens new R session ( does not affect the program you are working)

 ![](figures/06_project_setup.png)

---
# Folder structure on windows 
Type *R Project (.Rproj)* is R project file which stores more than just .Rmd file . By clicking the file all the related files get opened too . Very easy and nice of saving the R files

![](figures/07_project_setup.png)

---
# Project structure


![](figures/project_file_structure.png)

Steps 1-4 (maybe just 2-4) will happen in the 01_cleaning_data.Rmd, and Step 5 will happen in 02_analysis.Rmd.  

---

# Project structure

Another way to show this is with a directory tree as shown here:    
```
Dev
├── Codelist   <- This may not relvent in Validated R 
├── data       <- Folder  
├── Docum      <- This may not relvent in Validated R
├── logs           <- This may not relvent in Validated R
├── functions      <- Folder
├── metadata       <- This may not relvent in Validated R
├── Programs       <- Folder
    ├── 01_data_cleaning.Rmd   <- work files
    ├── 02_analysis.Rmd        <- work files
    ├── final_project.Rproj    <- you declared your project
├── results        <- Output Folder 


```

---
I found [Here](https://here.r-lib.org/) This Pictures says it all 
![](figures/here.png)
library(here)
here::here("data" , "adsl")
---
#### Using **file.exists** to get the Location and dir.create to create a required folder

folder <- "Programs"

 if (file.exists(folder)) {
  cat("The folder already exists")
 } else {
  dir.create(folder)
 }

Using Here Library to create a required folder

 if (!dir.exists(here('results')))
 {dir.create(here('results'))}


#### HOW TO CREATE, DELETE, MOVE, AND MORE WITH FILES using R

Though Python is usually thought of over R for doing system administration tasks, R is actually quite useful in this regard. In this post we’re going to talk about using R to create, delete, move, and obtain information on files.

Here is List of things how you can do them in R 

- [Basic tasks using R](http://theautomatic.net/2018/07/11/manipulate-files-r/)

---

# Assignment Operators 

The operator **"<–" is equivalent to "=" sign. for creating a vector, Equal to "="** **"<-" , "<<-" , "->" , "->>" , "=" all these assignment operators **

Use **";"  to write two R statements write next to each other **

There are three different assignment operators: two of them have leftwards and rightwards forms.

The operators <- and = assign into the environment in which they are evaluated. 

The operator <- can be used anywhere, whereas the operator = is only allowed at the top level (e.g., in the complete expression typed at the command prompt) or as one of the subexpressions in a braced list of expressions.

The operators <<- and ->> are normally only used in functions, and cause a search to be made through parent environments for an existing definition of the variable being assigned. 

If such a variable is found (and its binding is not locked) then its value is redefined, otherwise assignment takes place in the global environment.


---

#### The left assign <- 

![](figures/left_as.png)


---

#### The Equal assign =

![](figures/equal_assig.png)

---

#### The right assign -> 

![](figures/right_assig.png)

---
<br>
<br>

##                Use R as caliculator 
Here is how you can simply type in your numbers for all your calculations 

![](figures/caliculator.png)

---


##Data Types in R

![](figures/01data_types.png)


Vector (1x1 Matrix ; Data type : All one type either NUM or Char) .Matrix( 2x2 (or more) Matrix ; Data type : All one type either NUM or Char). List(Data Type : All types data (NUM and/or CHAR)).Data Frame (Data Type : Either Num or Char and more than 1x1 Collection of vectors)

---


##Data Types in R (Contd..)

Individual data values can be grouped together into containers . The main types of containers we  use are vectors , lists and data tables ( dataframe or Tibbles )

Scalar ---- Basic unit Ex ( s <- 1 , s <- "Scalar" )

Vector : A vector in R is like vector in Mathematics: a set of ordered elements, All the   elements in a vector or of same data type (either numeric , character or Logical). You can create vector by enclosing the elements in the R function **c()**  .  

Ex: c(1,2 , 3 ,NA , 5) ; c("R is Cool")
    
c("We have more than 1000 R programmers in our company")  <---- This is Okay as 1000 is Char

c(1000 , "programmers") + 1  <- might throw an **ERROR**  as they are two different types
    
    
---


![](figures/coercion.png)
---
## Lists

To solve the above problem (to have more than one datatype),we have datatype called **Lists** declared using **list()** . Lists are the R objects which contain elements of different types like integer, strings, vectors , matrix and list inside list

data_type <- list (integer = 1000 , character = "programmers" );data_type  # Will print 

![](figures/list.png)   

---

You can refer to elements of list using square brackets like a vector , but you can also use the **$** sign notation to refer to items in the list
 
see below to refer to  int and Integer in the data_type list use 

Ex: multiplication <- data_type**$**int; <- data_type**$**integer

![](figures/list_multi.png)  

---

A data Frame is list of vectors which are of equal length .R matrix contains only one type of data while data frame accepts different data types ( Numeric, Char , Factor)

**More details below**

## **Data Frames**

![](figures/dataframe.png)




---


#### How to Create a Date Frame 

data.frame (df , stringsAsFactors = TRUE )

df : it can be Matrix or vector or anything else 

Example of creating a data frame 


![](figures/01_dataframe.png)
---


##Basic data types

Unlike SAS and SPSS, R has several different data types (structures) including vectors, factors, data frames, matrices, arrays, and lists. The data frame is most like a dataset in SAS.

Data can be numbers, words, true/false values or combinations of these. In order to understand some later concepts, it's useful to have a basic understanding of data types in R: numeric, character, and logical

![](figures/all_data_types.png)


---
## Numeric Vector 
A vector can either be Numeric or Character or factor . Data types in R are referred to as "class" . The class command is used to find what type of data it is .


**Numeric Data Type**

|      structure
|-----------------------------------------------
|     Integer             ex: int <- 10   ; typeof(int)
|     double              ex: dou <- 10.0 ; typeof(dou)
|     Integer             ex: int <- 10L  ; typeof(int)
|     complex             ex: com <- 10i  ; typeof (com)
|------------------------------------------------

### Useful R functions 

typeof()         ------ Gives if it is a Integer , Double , Complex Etc 
--

is.numeric()     ------ Gives TRUE or FALSE



---
#### Try it in the consolse ;

int1 <- 1   ; typeof(int1) ; class(int1)

--


dou <- 10.0 ; typeof(dou)  ; class(dou)

--


int <- 10L  ; typeof(int)  ; class(int)


--


com <- 10i  ; typeof (com) ; class(com)
--

![](figures/num_types.png)



---

### Numeric vector ( **class()** VS **typeof()** )



```{r nvect, include=F}

x <- c(1,2,3,4,5,6) ; class(x)

typeof(x) ;

a1 = 10             ; class(a1)

b1 <- 11.01            ; class(b1)

typeof(b1) ;

b3 <- 11i            ; class(b3)

typeof(b3) ;

c = a1 + b1         ; class(c)

typeof(c) ;

D = a1 * b1         ; class(D);

typeof(D) ;

E = x - 10         ; class(E); 

typeof(E)


print(E)



```

`r chunk_reveal("nvect"  )`

---

### Character vector 

Character vectors need **Quotes** to indicate that they are *CHAR*

Character vector ----- ** c(" ") Character Strings are any Text between Quotation mark**
ex: typeof("Character string (with two Quotes) ")
     

`r chunk_reveal("cvect")`

```{r cvect, include=F}

x <- c("Mon" , "TUE" , "Wed");  class(x)

a1 = "THUR" ;   class(a1)

weekday <- c("Mon" , "TUE" , "Wed" , "Mon" , "Tue" , "Wed"); class(weekday ) 
# Getting the Count of Week days , See TUE and Tue are counted differently as R #is case sensitive
week_count <- table(weekday)
week_count

# b1 <- FRI  This gives an ERROR


#class(b1)

```

---


# Some functions all about type...

---

`r chunk_reveal("is_type")`

```{r is_type, include=F}


is.character("hi")

is.numeric(1)

is.integer(2.3)

is.double(4L)

is.integer(4)

is.integer(4L)

is.factor("good")

```

---

# Conversion from one type to another

---

`r chunk_reveal("as_type")`

```{r as_type, include=F}

as.numeric("hi")

as.integer(1)

as.character(2.3)

as.double(4L)

is.integer(4)

is.integer(4L)

as.factor(c("good", "bad"))

#%>% this is a pipe operator
# passes all of what precedes 
#to function that follows

matrix(1:4, nrow = 2) %>% as.vector()



```

---

# As factors

---

`r chunk_reveal("factors")`

```{r factors, include=F}

c("50", "80") %>% 
  
  as.factor() %>% 
  
  as.numeric() # maybe surprising

c("50", "80") %>% 

    as.factor() %>% 
  
    as.character() %>% 
  
     as.numeric() # less surprising
```

---

### **c()**  Examples of Creating different Types Vectors 

Combine Values into a Vector or List


This is a generic function which combines its arguments.

The default method combines its arguments to form a vector. All arguments are coerced to a common type which is the type of the returned value, and all attributes except names are removed.

The output type is determined from the highest type of the components in the hierarchy NULL < raw < logical < integer < double < complex < character < list < expression. Pairlists are treated as lists, whereas non-vector components (such as names / symbols and calls) are treated as one-element lists which cannot be unlisted even if recursive = TRUE.

Note that in R < 4.1.0, factors were treated only via their internal integer codes: now there is c.factor method which combines factors into a factor.

c is sometimes used for its side effect of removing attributes except names, for example to turn an array into a vector. as.vector is a more intuitive way to do this, but also drops names. Note that methods other than the default are not required to do this (and they will almost certainly preserve a class attribute).

This is a primitive function.

---

`r chunk_reveal("vec")`

```{r vec, include=F}
3:10

1:6 * 2

c(1, 2, 6, 10)


1:4 + 0:3

c(1, 2, 3, 4) + c(0, 1, 2, 3) 

TRUE

c(T, T, F, F)

"hello world"

c("hello", "hi", "bye", "bye-bye")

NULL

factor(c("hello", "hi", "bye", "bye"))

factor(c("hello", "hi", 
         "bye", "bye"), 
       levels = c("hi", "hello", 
                  "bye", "bye-bye"))
```


---


### str {utils}	

Compactly Display the Structure of an Arbitrary R Object

Compactly display the internal structure of an R object, a diagnostic function and an alternative to summary (and to some extent, dput). Ideally, only one line for each ‘basic’ structure is displayed. 

It is especially well suited to compactly display the (abbreviated) contents of (possibly nested) lists. The idea is to give reasonable output for any R object. It calls args for (non-primitive) function objects.

strOptions() is a convenience function for setting options(str = .), .

### Note

The default method tries to “work always”, but needs to make some assumptions for the case when object has a class but no own str() method which is the typical case:

There it relies on "[" and "[[" subsetting methods to be compatible with length(). When this is not the case, or when is.list(object) is TRUE, but length(object) differs from length(unclass(object)) it treats it as “irregular” and reports the contents of unclass(object) as “hidden list”.


---

`r chunk_reveal("str")`


```{r str, include=F}
str(3)

str("hello")

str(1.1)

str(1:8)

str(2L)

str(c(2, 5, 8))

str(c(2L, 5L, 8L))

str(c(1,3))

str(factor(c("hello", "bye")))

str(factor(c("hello", "bye"), 
           levels = c("hi", "hello", 
                      "bye")))

str(Sys.time())

str(Sys.Date())

```

---

### Data Frames constructing data in r

data.frame {base}	

The function data.frame() creates data frames, tightly coupled collections of variables which share many of the properties of matrices and of lists, used as the fundamental data structure by most of R's modeling software.

A data frame is a list of variables of the same number of rows with unique row names, given class **"data.frame"**. If no variables are included, the row names determine the number of rows.

The column names should be non-empty, and attempts to use empty names will have unsupported results. Duplicate column names are allowed, but you need to use **check.names = FALSE** for data.frame to generate such a data frame. However, not all operations on data frames will **preserve duplicated column names**: for example matrix-like subsetting will force column names in the result to be unique.

data.frame converts each of its arguments to a data frame by calling as.data.frame(optional = TRUE). As that is a generic function, methods can be written to change the behavior of arguments according to their classes: R comes with many such methods. Character variables passed to data.frame are converted to factor columns unless protected by I or argument stringsAsFactors is false. 


---

### Data Frames constructing data in r (contd..)

If a list or data frame or matrix is passed to data.frame it is as if each component or column had been passed as a separate argument (except for matrices protected by I).

Objects passed to data.frame should have the same number of rows, but atomic vectors (see is.vector), factors and character vectors protected by I will be recycled a whole number of times if necessary (including as elements of list arguments).

If row names are not supplied in the call to data.frame, the row names are taken from the first component that has suitable names, for example a named vector or a matrix with rownames or a data frame. (If that component is subsequently recycled, the names are discarded with a warning.) If row.names was supplied as NULL or no suitable component was found the row names are the integer sequence starting at one (and such row names are considered to be ‘automatic’, and not preserved by as.matrix).

If row names are supplied of length one and the data frame has a single row, the row.names is taken to specify the row names and not a column (by name or number).

---


Names are removed from vector inputs not protected by I.

default.stringsAsFactors is a utility that takes getOption("stringsAsFactors") and ensures the result is TRUE or FALSE (or throws an error if the value is not NULL). This function is deprecated now and will no longer be available in the future.

![](figures/01dataframe.png)
---

`r chunk_reveal("dat")`

```{r dat, include=F}
data.frame(
  subjid  = 1:6, 
  country = c("INDIA", "JAPAN", 
            "UK", "FRA",
            "US", "CAN"),
   nums = c(2.3, 4.1, 3.5, 
           3.2, 5.6, 8.9))

```

---

### Tibble ( The best friend) Build a data frame

**These concepts Will explainws in more detailed later in the presentation**

**tibble Vs Data Frame is topic by itself**

tibble() constructs a data frame. It is used like base::data.frame(), but with a couple notable differences:

The returned data frame has the class tbl_df, in addition to data.frame. This allows so-called "tibbles" to exhibit some special behaviour, such as enhanced printing. Tibbles are fully described in tbl_df.

tibble() is much lazier than base::data.frame() in terms of transforming the user's input.

Character vectors are not coerced to factor.

List-columns are expressly anticipated and do not require special tricks.

Column names are not modified.

Inner names in columns are left unchanged.

tibble() builds columns sequentially. When defining a column, you can refer to columns created earlier in the call. Only columns of length one are recycled.

If a column evaluates to a data frame or tibble, it is nested or spliced. 

tibble_row() constructs a data frame that is guaranteed to occupy one row. Vector columns are required to have size one, non-vector columns are wrapped in a list.

---

# tibble vs t**r**ibble {tibble}	R Documentation

Row-wise **tibble** creation

Create tibbles using an easier to read row-by-row layout. This is useful for small tables of data where readability is important. Please see tibble-package for a general introduction.

tribble(...)

# Note spell difference tRibble 

---
`r chunk_reveal("my_t")`

```{r my_t, include = FALSE}
library(tibble)

tribble(
  ~"id", ~"greet", ~"nums", # column heads
  1,        "hi",       2.3, 
  2,        "bye",      3.5,
  3,        "adios",    4.2
  )

# Unnamed arguments are named with their expression:
a <- 1:5
tibble(a, a * 2)

# Scalars (vectors of length one) are recycled:
ab <- tibble(a, b = a * 2, c = 1)
ab

```

---

`r chunk_reveal("my_t1")`

```{r my_t1, include = FALSE}

# Columns are available in subsequent expressions:


same <- tibble(x = runif(3), y = x * 2)
same

# tibble() never coerces its inputs

str(tibble(letters))

str(tibble(x = list(diag(1), diag(2))))

# or munges column names (unless requested),
chk_tbl  <- tibble(`a + b` = 1:3)


chk_tbl

# Unnamed arguments are named with their expression:
```

---

`r chunk_reveal("fun")`

```{r fun, include=F}
mean(1:5)

mean(1:100^2)

sd(1:10)

mean(c(1, 4, 6, 7))

mean(c(1, 4, 6, 7, NA))

mean(c(1, 4, 6, 7, NA), na.rm = T)

sd(c(1:10, NA))

sd(c(1:10, NA), na.rm = T)


x <- 1:4 ; x 

median(1:4)
# = 2.5 [even number]
x <- c(1:3 , 100, 1000) ; x 

median(c(1:3, 100, 1000)) 
 # = 3 [odd, robust]

min(5:1, pi) #-> one number

pmin(5:1, pi) #->  5  numbers

```

---

class: inverse, middle, center
# First up: classic flipbook, using defaults to walk through code pipeline
<!-- get a flipbook version of the my_cars code chunk - pauses are where parentheses are balanced -->


---

`r chunk_reveal("verb")`

```{r verb, include = FALSE}
library(dplyr)

cars %>%
  filter(speed > 4 ) %>%  
  filter(speed <= 10 ) %>%  
  arrange(speed , desc(dist)) %>%  
  mutate(time = speed * dist )  
 

cars %>%  rename(   furious = speed )%>% head()

cars %>%  distinct(dist) %>% head()

```

---

`r chunk_reveal("my_cars")`

```{r my_cars, include = FALSE}

cars %>%
  filter(speed > 4) %>%
  ggplot() +
  aes(x = speed) + #BREAK
  aes(y = dist) + #BREAK
  geom_point(
    alpha = .8, 
    color = "blue" 
    ) + 
  aes(size = speed) #BREAK
```

---
class: inverse, center, middle


# Next up:  refer to same chunk, but use user defined breakpoints, and display output only


<!-- get another flipbook version of the my_cars code chunk, this time at the defined breaks and only showing output -->
---

`r chunk_reveal("my_cars", break_type = "user", display_type = "output", title = "### user defined break! using #BREAK message")`



---
class: inverse, center, middle

# Next up:  cycle through different lines of code





<!-- get flipbook that rotates through lines, my_fill -->
---

`r chunk_reveal("my_fill", break_type = "rotate", widths = c(1,1), title = "### cycle through lines of code marked #ROTATE")`

```{r my_fill, eval = F, echo = F}
ggplot(data = cars) +
  aes(x = speed) +
  aes(y = dist) +
  geom_point(size = 8,
             shape = 21,
             alpha = .9,
             color = "snow") +
  aes(fill = speed) +
  scale_fill_viridis_c(option = "magma") + #ROTATE
  scale_fill_viridis_c(option = "cividis") + #ROTATE
  scale_fill_viridis_c(option = "plasma") #ROTATE
```


---
class: inverse, center, middle

# Next up:  look at multiple realizations of same code





<!-- get flipbook that shows multiple realizations of the same code -->
---

`r chunk_reveal("cars_multi", break_type = 5, title = "### see multiple realizations of code")`

```{r cars_multi, include = FALSE}
cars %>% 
  sample_frac(size = 1, replace = TRUE) %>%      
  ggplot() +              
  aes(x = speed) +
  aes(y = dist) +
  geom_count(
    alpha = .7,
    color = "blue",
    size = 4
    ) + 
  geom_smooth(method = lm, se = FALSE) +
  coord_cartesian(xlim = range(cars$speed),
                  ylim = range(cars$dist)) +
  theme(legend.position = c(.9, .2))
```


---

`r chunk_reveal("test", left_assign = "detect")`

```{r test, include=FALSE}
# hello
jam <- "hi"
```



<!-- adjust font size in this css code chunk, currently 80 -->

```{css, eval = TRUE, echo = FALSE}
.remark-code{line-height: 1.5; font-size: 80%}

@media print {
  .has-continuation {
    display: block;
  }
}

code.r.hljs.remark-code{
  position: relative;
  overflow-x: hidden;
}


code.r.hljs.remark-code:hover{
  overflow-x:visible;
  width: 500px;
  border-style: solid;
}
```



---

# Notes: 

- This minimal flipbook assumes you are online when you build and view.  It is going to find the most recent remark.js info online.

- xaringan/remark.js slideshows are not self contained, single file slide shows.  Make sure you ship all the associated files that are created to display your flipbooks/slideshows.  I like to push .html and associated files to github repository and use Github Pages to host for beyond local sharing. :-)

